{
	"info": {
		"_postman_id": "c36d38bb-3751-4733-9d08-12e24298fbfb",
		"name": "Banco_API_Evaluacion",
		"description": "Colecci√≥n dise√±ada para probar el flujo completo de microservicios **Gesti√≥n de Clientes** y **Operaciones Bancarias**.\n\n## Flujo recomendado\n\nCrear Cliente ‚Üí guarda `clienteId`  \nCrear Cuenta ‚Üí usa `clienteId`  \nRegistrar Movimiento ‚Üí usa `numeroCuenta`  \nEstado de Cuenta ‚Üí consulta por `clienteId`\n\n## Environments\n\n**Local**\n\n- `host_clientes=http://localhost:8081`\n    \n- `host_operaciones=http://localhost:8082`\n    \n\n**Docker**\n\n- `host_clientes=http://gestion-clientes:8081`\n    \n- `host_operaciones=http://operaciones-bancarias:8082`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49548372",
		"_collection_link": "https://paulbtrabajo10-2799578.postman.co/workspace/980ed9f2-5fdf-4206-9393-728bf5cd4d6c/collection/49548372-c36d38bb-3751-4733-9d08-12e24298fbfb?action=share&source=collection_link&creator=49548372"
	},
	"item": [
		{
			"name": "Clientes",
			"item": [
				{
					"name": "Crear Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201/200\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"const json = pm.response.json() || {};",
									"const id = json.data?.id || json.id;                    ",
									"const clienteId = json.data?.clienteId || json.clienteId;",
									"",
									"pm.test(\"La respuesta contiene id y clienteId\", function () {",
									"  pm.expect(id).to.exist;",
									"  pm.expect(clienteId).to.exist;",
									"});",
									"",
									"// Guardar ambos valores en environment",
									"pm.environment.set(\"id\", id);",
									"pm.environment.set(\"clienteId\", clienteId);",
									"",
									"console.log(\"id guardado:\", id);",
									"console.log(\"clienteId guardado:\", clienteId);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Jose Lema\",\n  \"genero\": \"M\",\n  \"edad\": 30,\n  \"identificacion\": \"1234564491\",\n  \"direccion\": \"Otavalo sn y principal\",\n  \"telefono\": \"098254785\",\n  \"contrasena\": \"Abc123@12\",\n  \"estado\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_clientes}}/clientes",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes"
							]
						},
						"description": "rear Cliente\n\n### Descripci√≥n\n\nCrea un nuevo cliente en el sistema, registrando su informaci√≥n personal y de contacto.  \nDurante el proceso, el sistema genera autom√°ticamente un identificador p√∫blico (`clienteId`) y cifra la contrase√±a antes de guardar el registro en la base de datos.\n\n### Notas\n\n- El cuerpo de la solicitud debe cumplir las validaciones definidas en el DTO `ClienteDTO`.\n    \n- El campo `clienteId` es opcional; si no se env√≠a, el sistema lo genera autom√°ticamente mediante el m√©todo `generarClienteId()`.\n    \n- La contrase√±a enviada se cifra utilizando `passwordEncoder` antes de almacenarse.\n    \n- Si alguno de los campos requeridos no cumple las reglas de validaci√≥n, el sistema devuelve un error **400 Bad Request** con el detalle de los campos inv√°lidos.\n    \n- Una vez creado, el cliente queda en estado activo (`estado: true`) a menos que se especifique lo contrario.\n    \n\n### Campos Requeridos\n\n- `nombre` (String)\n    \n- `genero` (String)\n    \n- `edad` (Integer)\n    \n- `identificacion` (String)\n    \n- `contrasena` (String)\n    \n- `estado` (Boolean)\n    \n\n### Campos Opcionales\n\n- `direccion` (String)\n    \n- `telefono` (String)\n    \n- `clienteId` (String)\n    \n\n### Endpoint\n\n`POST {{host_clientes}}/api/gestion-clientes/clientes`\n\nEjemplo Body:\n\n``` json\n{\n  \"nombre\": \"Jose Lema\",\n  \"genero\": \"M\",\n  \"edad\": 30,\n  \"identificacion\": \"1234567890\",\n  \"direccion\": \"Otavalo sn y principal\",\n  \"telefono\": \"098254785\",\n  \"contrasena\": \"Abc123@\",\n  \"estado\": true\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Listar Clientes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_clientes}}/clientes",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes"
							]
						},
						"description": "## Descripci√≥n\n\nRetorna la lista completa de clientes registrados."
					},
					"response": []
				},
				{
					"name": "Cliente por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_clientes}}/clientes/{{id}}",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes",
								"{{id}}"
							]
						},
						"description": "## **Descripci√≥n**  \nObtiene la informaci√≥n detallada de un cliente espec√≠fico mediante su identificador √∫nico (`id`).\n\n### **Notas**\n\n- Este endpoint devuelve los datos completos del cliente previamente registrado.\n    \n- El par√°metro `{{id}}` se obtiene al crear un cliente (almacenado en el environment de Postman).\n    \n- Es √∫til para validar que los datos fueron guardados correctamente o para consultas individuales.\n    \n\n### **Endpoint**\n\n`GET {{host_clientes}}/api/gestion-clientes/clientes/{{id}}`\n\n### üßæ **Ejemplo URL**\n\n```\nhttp://localhost:8081/api/gestion-clientes/clientes/1\n\n ```\n\n### üì§ **Ejemplo Respuesta**\n\n```\n{\n  \"id\": 1,\n  \"clienteId\": \"C0001\",\n  \"nombre\": \"Jose Lema\",\n  \"genero\": \"M\",\n  \"edad\": 30,\n  \"identificacion\": \"1234567890\",\n  \"direccion\": \"Otavalo sn y principal\",\n  \"telefono\": \"098254785\",\n  \"estado\": true\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Actualizar cliente",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"nombre\": \"Jose Leman\",\n    \"genero\": \"Masculino\",\n    \"edad\": 30,\n    \"identificacion\": \"1234564490\",\n    \"direccion\": \"Quito sn y principal\",\n    \"telefono\": \"098254785\",\n    \"contrasena\": null,\n    \"estado\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_clientes}}/clientes/{{id}}",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes",
								"{{id}}"
							]
						},
						"description": "### Descripci√≥n\n\nActualiza la informaci√≥n de un cliente existente seg√∫n su `id`.  \nSolo se modifican los campos enviados en el cuerpo de la solicitud; los campos no incluidos permanecen sin cambios.  \nTambi√©n se controlan cambios de contrase√±a y activaci√≥n/inactivaci√≥n del cliente con env√≠o de eventos Kafka.\n\n### Notas\n\n- Si el cliente no existe, se devuelve un error **404**.\n    \n- No se puede reutilizar la misma contrase√±a actual ni la anterior.\n    \n- Si el estado cambia:\n    \n    - De **activo ‚Üí inactivo**, se publica un evento `CLIENTE_DESACTIVADO` (para desactivar cuentas asociadas).\n        \n    - De **inactivo ‚Üí activo**, se publica un evento `CLIENTE_ACTIVADO`.\n        \n- Solo se permiten actualizaciones parciales (los valores nulos o vac√≠os no se aplican).\n    \n\n### Endpoint\n\n`PUT {{host_clientes}}/api/gestion-clientes/clientes/{{id}}`\n\n### Campos Actualizables\n\n- `nombre` (String)\n    \n- `genero` (String)\n    \n- `edad` (Integer)\n    \n- `identificacion` (String)\n    \n- `direccion` (String)\n    \n- `telefono` (String)\n    \n- `contrasena` (String)\n    \n- `estado` (Boolean)\n    \n\n### **Endpoint**\n\n`PUT {{host_clientes}}/api/gestion-clientes/clientes/{{id}}`\n\n### **Ejemplo Body**\n\n```\n{\n  \"nombre\": \"Jose Lema Modificado\",\n  \"edad\": 31,\n  \"direccion\": \"Quito Av. Central y Bol√≠var\",\n  \"telefono\": \"099998877\",\n  \"contrasena\": \"NewPass@2025\",\n  \"estado\": false\n}\n\n ```\n\n### **Ejemplo Respuesta**\n\n```\n{\n  \"mensaje\": \"Cliente actualizado correctamente\",\n  \"data\": {\n    \"id\": 1,\n    \"clienteId\": \"C0001\",\n    \"nombre\": \"Jose Lema Modificado\",\n    \"genero\": \"M\",\n    \"edad\": 31,\n    \"identificacion\": \"1234567890\",\n    \"direccion\": \"Quito Av. Central y Bol√≠var\",\n    \"telefono\": \"099998877\",\n    \"estado\": false\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Eliminar cliente",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_clientes}}/clientes/{{id}}",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes",
								"{{id}}"
							]
						},
						"description": "### Descripci√≥n\n\nElimina f√≠sicamente un cliente del sistema, junto con todas sus cuentas y movimientos asociados.  \nAdem√°s, se publica un evento para notificar al microservicio de **Operaciones Bancarias** que debe eliminar toda la informaci√≥n relacionada con ese cliente.\n\n### Notas\n\n- La eliminaci√≥n es **f√≠sica**, no l√≥gica.\n    \n- Si el cliente no existe, se devuelve un error **404**.\n    \n- Antes de eliminar, se publica un evento `CLIENTE_ELIMINADO` con el `clienteId`.\n    \n- El microservicio de **Operaciones Bancarias** escucha este evento y elimina todas las cuentas y movimientos vinculados al cliente.\n    \n- Esta acci√≥n es irreversible; toda la informaci√≥n del cliente y sus transacciones se pierde definitivamente.\n    \n\n### Par√°metros\n\n- `id` (Long): Identificador interno del cliente a eliminar.\n    \n\n### Endpoint\n\n`DELETE {{host_clientes}}/api/gestion-clientes/clientes/{{id}}`"
					},
					"response": []
				},
				{
					"name": "Cliente por clienteId",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_clientes}}/clientes/codigo/{{clienteId}}",
							"host": [
								"{{host_clientes}}"
							],
							"path": [
								"clientes",
								"codigo",
								"{{clienteId}}"
							]
						},
						"description": "### **Descripci√≥n**\n\nObtiene la informaci√≥n de un cliente utilizando su identificador p√∫blico `clienteId`, el cual se genera autom√°ticamente al momento de crear el cliente.\n\n### **Notas**\n\n- Este endpoint es √∫til cuando se desea consultar un cliente sin usar el `id` interno de base de datos.\n    \n- El `{{clienteId}}` se guarda autom√°ticamente en el environment de Postman al crear el cliente.\n    \n- Puede utilizarse en integraciones donde solo se conozca el `clienteId`, por ejemplo, al obtener informaci√≥n relacionada con cuentas o reportes.\n    \n\n### **Endpoint**\n\n`GET {{host_clientes}}/api/gestion-clientes/clientes/clienteId/{{clienteId}}`\n\n### **Ejemplo URL**\n\n```\nhttp://localhost:8081/api/gestion-clientes/clientes/clienteId/C0001\n\n ```\n\n### **Ejemplo Respuesta**\n\n``` json\n{\n  \"id\": 1,\n  \"clienteId\": \"C0001\",\n  \"nombre\": \"Jose Lema\",\n  \"genero\": \"M\",\n  \"edad\": 30,\n  \"identificacion\": \"1234567890\",\n  \"direccion\": \"Otavalo sn y principal\",\n  \"telefono\": \"098254785\",\n  \"estado\": true\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "Contiene los endpoints relacionados con la gesti√≥n de clientes: creaci√≥n, consulta, actualizaci√≥n y eliminaci√≥n.  \nPermite mantener la informaci√≥n personal y de estado de los clientes del sistema."
		},
		{
			"name": "Cuentas",
			"item": [
				{
					"name": "Crear Cuenta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200/201\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"const json = pm.response.json() || {};",
									"",
									"// Extraer valores desde la respuesta",
									"const numeroCuenta = json.numeroCuenta || json.data?.numeroCuenta;",
									"const cuentaId = json.cuentaId || json.id || json.data?.cuentaId || json.data?.id;",
									"",
									"// Guardar variables en el environment",
									"pm.environment.set(\"numeroCuenta\", numeroCuenta);",
									"pm.environment.set(\"cuentaId\", cuentaId);",
									"",
									"// Mostrar en consola",
									"console.log(\"cuentaId:\", cuentaId, \"numeroCuenta:\", numeroCuenta);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"numeroCuenta\": \"585549\",\n  \"tipoCuenta\": \"AHORRO\",\n  \"saldoInicial\": 1000,\n  \"estado\": true,\n  \"clienteId\": \"{{clienteId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_operaciones}}/cuentas",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"cuentas"
							]
						},
						"description": "### Descripci√≥n\n\nCrea una nueva cuenta bancaria asociada a un cliente existente.  \nEl sistema valida que el n√∫mero de cuenta sea √∫nico y que el cliente exista antes de registrar la cuenta.\n\n### Notas\n\n- Se valida que el `numeroCuenta` no est√© registrado previamente.\n    \n- Se consulta al microservicio de **Gesti√≥n de Clientes** para verificar la existencia del cliente mediante `clienteId`.\n    \n- Si el cliente no existe, se devuelve un error **404**.\n    \n- Si no se especifica `saldoInicial`, el sistema lo asigna autom√°ticamente como **0.00**.\n    \n- La cuenta se crea sin registrar un movimiento inicial.\n    \n- Devuelve un c√≥digo **201 Created** con la ubicaci√≥n del recurso creado.\n    \n\n### Endpoint\n\n`POST {{host_operaciones}}/api/operaciones/cuentas`\n\n### Campos Requeridos\n\n- `numeroCuenta` (String)\n    \n- `tipoCuenta` (String)\n    \n- `saldoInicial` (Decimal)\n    \n- `estado` (Boolean)\n    \n- `clienteId` (String)\n    \n\n### Campos Opcionales\n\n- `clienteNombre` (String)\n    \n- `fechaCreacion` (DateTime)\n    \n\n### Endpoint\n\n`POST {{host_operaciones}}/api/operaciones/cuentas`\n\n### Ejemplo Body\n\n``` json\n{\n  \"numeroCuenta\": \"585545\",\n  \"tipoCuenta\": \"AHORRO\",\n  \"saldoInicial\": 1000,\n  \"estado\": true,\n  \"clienteId\": \"{{clienteId}}\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Listar Cuentas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/cuentas",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"cuentas"
							]
						},
						"description": "## Descripci√≥n\n\nRetorna la lista completa de cuentas registrados."
					},
					"response": []
				},
				{
					"name": "Cuenta por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/cuentas/{{cuentaId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"cuentas",
								"{{cuentaId}}"
							]
						},
						"description": "## Endpoint: Cuenta por ID\n\n### Descripci√≥n\n\nObtiene la informaci√≥n detallada de una cuenta bancaria espec√≠fica mediante su identificador √∫nico `idCuenta`.\n\n### Notas\n\n- Permite consultar los datos completos de una cuenta registrada, incluyendo tipo, saldo y estado.\n    \n- El par√°metro `{{idCuenta}}` se obtiene al crear una cuenta y se guarda en el environment de Postman.\n    \n- Este endpoint es √∫til para validar la existencia y estado actual de una cuenta antes de realizar operaciones o movimientos.\n    \n\n### Endpoint\n\n`GET {{host_operaciones}}/api/operaciones/cuentas/{{idCuenta}}`\n\n### Ejemplo URL\n\n[http://localhost:8082/api/operaciones/cuentas/1](http://localhost:8082/api/operaciones/cuentas/1)\n\n```\n### Ejemplo Respuesta\n```json\n{\n  \"id\": 1,\n  \"cuentaId\": \"CT0001\",\n  \"numeroCuenta\": \"585545\",\n  \"tipoCuenta\": \"AHORRO\",\n  \"saldoInicial\": 1000.00,\n  \"estado\": true,\n  \"clienteId\": \"C0001\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Actualizar cuenta",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numeroCuenta\": \"{{numeroCuenta}}\",\n    \"clienteId\":\"{{clienteId}}\",\n    \"tipoCuenta\": \"AHORRO\",\n    \"saldoInicial\": 1000.00,\n    \"estado\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_operaciones}}/cuentas/{{cuentaId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"cuentas",
								"{{cuentaId}}"
							]
						},
						"description": "## Endpoint: Actualizar Cuenta\n\n### Descripci√≥n\n\nActualiza los datos de una cuenta bancaria existente identificada por su `idCuenta`.  \nPermite modificar √∫nicamente ciertos campos definidos como mutables, preservando la integridad de la informaci√≥n financiera.\n\n### Notas\n\n- El par√°metro `{{idCuenta}}` corresponde al identificador √∫nico de la cuenta y se obtiene al momento de crearla.\n    \n- Los campos **`numeroCuenta`** y **`clienteId`** son **inmutables** y no pueden modificarse.\n    \n- Si la cuenta ya tiene movimientos registrados, **no se permite modificar el saldo inicial**.\n    \n- Solo se pueden actualizar los siguientes campos:\n    \n    - `tipoCuenta`\n        \n    - `estado`\n        \n    - `saldoInicial` (solo si no existen movimientos previos)\n        \n- Cuando el campo `estado` se establece en `false`, la cuenta queda inactiva y no podr√° registrar nuevos movimientos.\n    \n- Si se intenta modificar un campo restringido o el saldo inicial de una cuenta con movimientos, el sistema devuelve un mensaje de error con c√≥digo **400/409** seg√∫n la configuraci√≥n.\n    \n\n### Endpoint\n\n`PUT {{host_operaciones}}/api/operaciones/cuentas/{{idCuenta}}`\n\n### Ejemplo Body\n\n\\`\\`\\`json  \n{  \n\"numeroCuenta\": \"585545\",  \n\"tipoCuenta\": \"AHORRO\",  \n\"saldoInicial\": 1500.00,  \n\"estado\": true,  \n\"clienteId\": \"C0001\"  \n}"
					},
					"response": []
				},
				{
					"name": "Eliminar cuenta",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/cuentas/{{cuentaId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"cuentas",
								"{{cuentaId}}"
							]
						},
						"description": "## Endpoint: Eliminar Cuenta\n\n### Descripci√≥n\n\nElimina f√≠sicamente una cuenta bancaria espec√≠fica identificada por su `idCuenta`, junto con todos los movimientos asociados a ella.\n\n### Notas\n\n- El par√°metro `{{idCuenta}}` corresponde al identificador √∫nico de la cuenta y se obtiene al momento de crearla.\n    \n- Este proceso realiza una **eliminaci√≥n f√≠sica**, no l√≥gica.\n    \n- Antes de eliminar la cuenta, el sistema:\n    \n    1. Verifica que la cuenta exista.\n        \n    2. Elimina todos los movimientos asociados (`deleteAllByCuentaId`).\n        \n    3. Luego elimina definitivamente la cuenta.\n        \n- Si la cuenta no existe, se lanza una excepci√≥n con el mensaje **\"No se encontr√≥ la cuenta con id X\"**.\n    \n- Esta acci√≥n es irreversible; toda la informaci√≥n relacionada con la cuenta y sus transacciones se pierde permanentemente.\n    \n- Se recomienda usar este endpoint √∫nicamente en entornos de desarrollo o para limpieza de datos controlada.\n    \n\n### Endpoint\n\n`DELETE {{host_operaciones}}/api/operaciones/cuentas/{{idCuenta}}`\n\n### Ejemplo URL\n\n[http://localhost:8082/api/operaciones/cuentas/1](http://localhost:8082/api/operaciones/cuentas/1)  \nEjemplo Respuesta Exitosa\n\n[http://localhost:8082/api/operaciones/cuentas/1](http://localhost:8082/api/operaciones/cuentas/1)\n\n```\n### Ejemplo Respuesta Exitosa\n```json\n{\n  \"mensaje\": \"Cuenta y movimientos asociados eliminados correctamente\",\n  \"data\": {\n    \"idCuenta\": 1,\n    \"numeroCuenta\": \"585545\"\n  }\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "Incluye los endpoints para la administraci√≥n de cuentas bancarias: creaci√≥n, consulta, actualizaci√≥n y eliminaci√≥n.  \nCada cuenta est√° asociada a un cliente y puede ser de tipo **Ahorro** o **Corriente**."
		},
		{
			"name": "Movimientos",
			"item": [
				{
					"name": "Registrar Movimiento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200/201\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"let json;",
									"",
									"// Manejar errores si la respuesta no es JSON",
									"try {",
									"  json = pm.response.json();",
									"} catch (e) {",
									"  console.error(\"‚ö†Ô∏è Error al parsear JSON:\", e);",
									"  json = {};",
									"}",
									"",
									"// Extraer el ID del movimiento desde data.id",
									"const movimientoId = json?.data?.id;",
									"const numeroCuenta = json?.data?.numeroCuenta;",
									"",
									"// Mostrar los valores en la consola",
									"console.log(\"‚û°Ô∏è movimientoId:\", movimientoId);",
									"console.log(\"‚û°Ô∏è numeroCuenta:\", numeroCuenta);",
									"",
									"// Guardar las variables en el environment si existen",
									"if (movimientoId !== undefined && movimientoId !== null) {",
									"  pm.environment.set(\"movimientoId\", movimientoId);",
									"  console.log(\"‚úÖ movimientoId guardado en environment:\", movimientoId);",
									"} else {",
									"  console.warn(\"‚ö†Ô∏è No se encontr√≥ movimientoId en la respuesta.\");",
									"}",
									"",
									"if (numeroCuenta) {",
									"  pm.environment.set(\"numeroCuenta\", numeroCuenta);",
									"  console.log(\"‚úÖ numeroCuenta guardado:\", numeroCuenta);",
									"}",
									"",
									"// Test para confirmar que el movimientoId fue capturado",
									"pm.test(\"El movimientoId fue guardado correctamente\", function () {",
									"  pm.expect(pm.environment.get(\"movimientoId\")).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"numeroCuenta\": \"{{numeroCuenta}}\",\n  \"tipoMovimiento\": \"DEPOSITO\",\n  \"valor\": 100\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_operaciones}}/movimientos",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"movimientos"
							]
						},
						"description": "## Descripci√≥n\n\nRegistra un nuevo movimiento (dep√≥sito o retiro) en una cuenta bancaria existente.\n\n### Notas\n\n- Este endpoint afecta el saldo de la cuenta especificada por `numeroCuenta`.\n    \n- El campo `tipoMovimiento` puede ser **DEPOSITO** o **RETIRO**.\n    \n- El valor ingresado se suma o resta autom√°ticamente del saldo actual seg√∫n el tipo de movimiento.\n    \n- Usa el `numeroCuenta` obtenido previamente al crear la cuenta.\n    \n\n### Endpoint\n\n`POST {{host_operaciones}}/api/operaciones/movimientos`\n\n### Ejemplo Body\n\n``` json\n{\n  \"numeroCuenta\": \"{{numeroCuenta}}\",\n  \"tipoMovimiento\": \"DEPOSITO\",\n  \"valor\": 100.00\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Validar saldo insuficiente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debe rechazar retiro con saldo insuficiente\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"});",
									"",
									"pm.test(\"Mensaje de error indica saldo insuficiente\", function () {",
									"  const body = pm.response.text();",
									"  pm.expect(body.toLowerCase()).to.include.oneOf([\"saldo no disponible\", \"saldo insuficiente\"]);",
									"});",
									"",
									"console.log(\"Resultado de validaci√≥n de control de saldo:\", pm.response.text());",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"numeroCuenta\": \"{{numeroCuenta}}\",\n  \"tipoMovimiento\": \"RETIRO\",\n  \"valor\": 999999\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_operaciones}}/movimientos",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"movimientos"
							]
						},
						"description": "## Descripci√≥n\n\nVerifica la regla de negocio que impide realizar un retiro si no hay saldo suficiente en la cuenta.\n\n### Notas\n\n- Usa el `numeroCuenta` generado previamente.\n    \n- Intenta retirar un valor mayor al saldo disponible.\n    \n- La API debe responder con un **HTTP 400 o 409**, y un mensaje indicando ‚ÄúSaldo no disponible‚Äù o ‚ÄúSaldo insuficiente‚Äù.\n    \n\n### Endpoint\n\n`POST {{host_operaciones}}/api/operaciones/movimientos`\n\n### Ejemplo Body\n\n``` json\n{\n  \"numeroCuenta\": \"{{numeroCuenta}}\",\n  \"tipoMovimiento\": \"RETIRO\",\n  \"valor\": 999999\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Movimientos por iD cuenta",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/movimientos/cuenta/{{cuentaId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"movimientos",
								"cuenta",
								"{{cuentaId}}"
							]
						},
						"description": "### Descripci√≥n\n\nObtiene la lista completa de movimientos asociados a una cuenta bancaria espec√≠fica, ordenados de manera descendente por fecha (del m√°s reciente al m√°s antiguo).\n\n### Notas\n\n- El par√°metro `{{cuentaId}}` identifica la cuenta cuyos movimientos se desean consultar.\n    \n- El sistema primero valida que la cuenta exista; si no se encuentra, se devuelve un error.\n    \n- Durante el proceso, se enriquece la informaci√≥n de la cuenta con el **nombre del cliente** asociado, consultando el microservicio de **Gesti√≥n de Clientes**.\n    \n- Si el cliente no existe o ocurre un error al consultarlo, se devuelve un texto descriptivo en el campo `clienteNombre`.\n    \n- La respuesta incluye todos los movimientos registrados, junto con su saldo resultante y los datos de la cuenta.\n    \n\n### Endpoint\n\n`GET {{host_operaciones}}/api/operaciones/movimientos/cuenta/{{cuentaId}}`\n\n### Ejemplo URL\n\nhttp://localhost:8082/api/operaciones/movimientos/cuenta/1"
					},
					"response": []
				},
				{
					"name": "Actualizar ultimo movimiento",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numeroCuenta\": \"{{numeroCuenta}}\",\n    \"tipoMovimiento\": \"RETIRO\",\n    \"valor\": 60.00\n\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_operaciones}}/movimientos/{{movimientoId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"movimientos",
								"{{movimientoId}}"
							]
						},
						"description": "## Endpoint: Actualizar √öltimo Movimiento\n\n### Descripci√≥n\n\nActualiza la informaci√≥n del √∫ltimo (o √∫nico) movimiento registrado en una cuenta bancaria.  \nPermite corregir el tipo de movimiento o el valor, recalculando el saldo disponible de la cuenta de manera consistente.\n\n### Notas\n\n- El par√°metro `{{movimientoId}}` identifica el movimiento que se desea actualizar.\n    \n- Si el cuerpo de la solicitud incluye un `id`, este debe coincidir con el `id` de la URL; de lo contrario, el sistema lanza un error.\n    \n- Solo se permite actualizar **el √∫ltimo o el √∫nico movimiento** de una cuenta. Si se intenta modificar un movimiento intermedio, se rechaza la solicitud.\n    \n- Antes de aplicar los cambios, el sistema:\n    \n    1. Verifica que el movimiento exista.\n        \n    2. Determina si es el √∫ltimo movimiento registrado para esa cuenta.\n        \n    3. Obtiene el saldo base (del movimiento anterior o del saldo inicial de la cuenta).\n        \n    4. Ajusta el signo del valor seg√∫n el tipo de movimiento.\n        \n    5. Calcula el nuevo saldo resultante y valida que no sea negativo.\n        \n    6. Guarda los cambios actualizando el tipo, valor y fecha del movimiento.\n        \n- Si el saldo resultante es negativo, se rechaza la operaci√≥n con el mensaje ‚ÄúSaldo no disponible‚Äù.\n    \n\n### Endpoint\n\n`PUT {{host_operaciones}}/api/operaciones/movimientos/{{movimientoId}}`"
					},
					"response": []
				},
				{
					"name": "Eliminar ultimo movimiento",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/movimientos/{{movimientoId}}",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"movimientos",
								"{{movimientoId}}"
							]
						},
						"description": "## Endpoint: Eliminar √öltimo Movimiento\n\n### Descripci√≥n\n\nElimina f√≠sicamente un movimiento bancario espec√≠fico identificado por su `id`, siempre que sea el √∫ltimo o el √∫nico movimiento registrado en la cuenta asociada.\n\n### Notas\n\n- El par√°metro `{{movimientoId}}` identifica el movimiento que se desea eliminar.\n    \n- Antes de proceder, el sistema valida:\n    \n    1. Que el movimiento exista.\n        \n    2. Que la cuenta asociada tenga movimientos registrados.\n        \n    3. Que el movimiento a eliminar sea el √∫ltimo o el √∫nico de la cuenta.\n        \n- Si el movimiento no es el m√°s reciente y existen otros posteriores, el sistema rechaza la operaci√≥n.\n    \n- Esta eliminaci√≥n es **f√≠sica**: el movimiento se borra definitivamente del sistema.\n    \n- No se actualiza el saldo de la cuenta de manera retroactiva; el historial queda con el √∫ltimo saldo anterior al movimiento eliminado.\n    \n\n### Endpoint\n\n`DELETE {{host_operaciones}}/api/operaciones/movimientos/{{movimientoId}}`\n\n### Ejemplo URL"
					},
					"response": []
				}
			],
			"description": "Agrupa los endpoints que registran, consultan, actualizan o eliminan movimientos bancarios.  \nPermite realizar dep√≥sitos, retiros y verificar saldos disponibles."
		},
		{
			"name": "Reportes",
			"item": [
				{
					"name": "Estado de Cuenta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Estado de cuenta devuelto correctamente\", function () {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Respuesta contiene datos del cliente y cuentas\", function () {",
									"  const json = pm.response.json();",
									"  pm.expect(json).to.have.property(\"cliente\");",
									"  pm.expect(json).to.have.property(\"cuentas\");",
									"  pm.expect(json.cuentas).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									"console.log(\"üìä Estado de cuenta recibido:\", pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_operaciones}}/reportes?clienteId={{clienteId}}&fechaInicio=2025-10-01&fechaFin=2025-11-30",
							"host": [
								"{{host_operaciones}}"
							],
							"path": [
								"reportes"
							],
							"query": [
								{
									"key": "clienteId",
									"value": "{{clienteId}}"
								},
								{
									"key": "fechaInicio",
									"value": "2025-10-01"
								},
								{
									"key": "fechaFin",
									"value": "2025-11-30"
								}
							]
						},
						"description": "### Descripci√≥n\n\nGenera un reporte detallado del estado de cuenta de un cliente en un rango de fechas espec√≠fico.  \nIncluye la informaci√≥n del cliente, las cuentas asociadas y los movimientos realizados dentro del per√≠odo consultado.\n\n### Notas\n\n- Este endpoint consolida la informaci√≥n desde los microservicios de **Gesti√≥n de Clientes**, **Operaciones de Cuentas** y **Movimientos**.\n    \n- El reporte se genera a partir del `clienteId` y de las fechas `fechaInicio` y `fechaFin`.\n    \n- Antes de generar el reporte, el sistema valida:\n    \n    1. Que las fechas sean v√°lidas (`fechaInicio` no puede ser posterior a `fechaFin`).\n        \n    2. Que existan cuentas registradas para el cliente.\n        \n- Para cada cuenta del cliente:\n    \n    - Se enriquece la informaci√≥n con el nombre del cliente.\n        \n    - Se obtienen todos los movimientos ocurridos dentro del rango de fechas.\n        \n    - Se calcula el saldo inicial, los movimientos y el estado actual de la cuenta.\n        \n- Si el cliente no tiene cuentas registradas, el sistema devuelve un error con el mensaje correspondiente.\n    \n- Este reporte es de solo lectura y no modifica ninguna entidad.\n    \n\n### Endpoint\n\n`GET {{host_operaciones}}/api/operaciones/reportes?clienteId={{clienteId}}&fechaInicio=YYYY-MM-DD&fechaFin=YYYY-MM-DD`\n\n### Ejemplo URL\n\n`{{host_operaciones}}/api/operaciones/reportes?clienteId={{clienteId}}&fechaInicio=2025-10-01&fechaFin=2025-11-30`\n\n### Ejemplo Respuesta\n\n``` json\n{\n  \"cliente\": \"Jose Lema\",\n  \"cuentas\": [\n    {\n      \"numeroCuenta\": \"585545\",\n      \"tipoCuenta\": \"AHORRO\",\n      \"saldoInicial\": 1000.00,\n      \"estado\": true,\n      \"movimientos\": [\n        {\n          \"fecha\": \"2025-10-25T10:00:00\",\n          \"tipoMovimiento\": \"DEPOSITO\",\n          \"valor\": 200.00,\n          \"saldoDisponible\": 1200.00\n        }\n      ],\n      \"saldoDisponible\": 1200.00\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "Re√∫ne los endpoints que generan reportes consolidados de los clientes, como el **Estado de Cuenta**, mostrando movimientos y saldos dentro de un rango de fechas."
		}
	]
}